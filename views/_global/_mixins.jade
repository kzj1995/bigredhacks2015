//-
    Contains globally available utility functions

//-
    generate a list of HTML <option> items for a dropdown
    @param arr array to generate options on
    @param {object} options
                    options.selected: string corresponding to default value
    @returns {buffered html}
mixin generateOptions(arr, options)
    -
        options = options || {};
        options.selected = options.selected || "";

    each item in arr
        - var selected = false;
        if (options.selected + "" === item + "")
            - selected = true;
        option(selected=selected, value=item+"") #{item}

//-
     generate a list of inline HTML radio inputs w/ a bootstrap wrapper
     @param arr array to generate options on
     @param {object} options
                      options.checked: string corresponding to default value
                      options.name: "name" of radio button set (string)
                      options.label: label of radio button set (array)
     @returns {string}
mixin generateInlineRadio(arr,options)
    -
        options = options || {};
        options.checked = options.checked || ""; //value of checked item
        options.name = options.name || ""; //name of inputs
        options.label = options.label || arr; //text to display next to inputs, defaults to array

    for item,ind in arr
        -
            var params = {};
            if (options.checked === item + "")
                params.checked = true;
            if (options.name.length > 0)
                params.name = options.name;
            params.value = item
        label.radio-inline
            input(type="radio")&attributes(params)
            |#{options.label[ind]}


//-
    generate <li><a href={url}>{name}</a></li>
    Used to generate the sidebars
    @param listItems array of {name,url}
    @param active url of active item
mixin generateUrlList(listItems, active)
    - active = active.split(/[?#]/)[0]; //remove query string, hash
    for item in listItems
        -
            if (item.hasOwnProperty("reg_open") && item.reg_open && !middlehelp.isRegistrationOpen()) continue;
            if (item.hasOwnProperty("results_released") && item.results_released && !middlehelp.isResultsReleased()) continue;
            var classes = [];
            if (active == item.url) classes.push("active");
        li: a(href=item.url,class=classes) #{item.name}

//-
    returns a self link to a url (href and text are the same)
    @param {string} url to display and link to
    @returns {buffered html}
mixin selflink(url)
    a(href="#{url}") #{url}